#include <Servo.h>

// --- Pins ---
const int PIN_FSR    = A0;
const int PIN_BUZZER = 8;
const int PIN_SERVO  = 9;
const int PIN_BTN    = 2;   // active LOW (pull-up)

// --- Config ---
const int  FSR_THRESHOLD     = 200;   // analog units
const int  FSR_HYSTERESIS    = 15;    // ignore tiny changes
const int  DARTS_TO_TRIGGER  = 3;

const int  SERVO_OPEN_ANGLE  = 90;
const int  SERVO_CLOSE_ANGLE = 0;
const unsigned long SERVO_OPEN_TIME_MS = 3000;  // hold open
const unsigned long BUZZ_TIME_MS       = 300;   // beep length
const unsigned long FSR_COOLDOWN_MS    = 250;   // gap between counts

// --- State ---
Servo servoDrive;
int   fsrCount        = 0;
int   lastFsr         = 0;
bool  emergency       = false;
bool  cycleRunning    = false;
unsigned long lastFsrTickMs = 0;

void setup() {
  pinMode(PIN_BUZZER, OUTPUT);
  pinMode(PIN_BTN, INPUT_PULLUP);
  digitalWrite(PIN_BUZZER, LOW);

  servoDrive.attach(PIN_SERVO);
  servoDrive.write(SERVO_CLOSE_ANGLE);

  // Serial.begin(9600); // uncomment if you want logs
}

void loop() {
  if (digitalRead(PIN_BTN) == LOW) {
    emergencyStop();
    return;
  }

  if (!cycleRunning) {
    countFsrEvents();
    if (fsrCount >= DARTS_TO_TRIGGER) runCycle();
  }
}

// --- Helpers ---
void countFsrEvents() {
  const int fsr = analogRead(PIN_FSR);
  const unsigned long now = millis();

  // rising change above noise & threshold, with cooldown
  if (fsr > FSR_THRESHOLD &&
      (fsr - lastFsr) > FSR_HYSTERESIS &&
      (now - lastFsrTickMs) > FSR_COOLDOWN_MS) {
    fsrCount++;
    lastFsrTickMs = now;
    // Serial.println(fsrCount);
  }
  lastFsr = fsr;
}

void runCycle() {
  cycleRunning = true;

  // open
  servoDrive.write(SERVO_OPEN_ANGLE);
  buzz(BUZZ_TIME_MS);
  if (waitWithEmergency(SERVO_OPEN_TIME_MS)) return;

  // close
  servoDrive.write(SERVO_CLOSE_ANGLE);
  buzz(0); // ensure off

  // reset for next round
  fsrCount = 0;
  lastFsr  = 0;
  cycleRunning = false;
}

void buzz(unsigned long durationMs) {
  if (durationMs == 0) {
    digitalWrite(PIN_BUZZER, LOW);
    return;
  }
  const unsigned long start = millis();
  digitalWrite(PIN_BUZZER, HIGH);
  while (millis() - start < durationMs) {
    if (digitalRead(PIN_BTN) == LOW) { // emergency while buzzing
      digitalWrite(PIN_BUZZER, LOW);
      emergencyStop();
      return;
    }
  }
  digitalWrite(PIN_BUZZER, LOW);
}

bool waitWithEmergency(unsigned long durationMs) {
  const unsigned long start = millis();
  while (millis() - start < durationMs) {
    if (digitalRead(PIN_BTN) == LOW) { // emergency during wait
      emergencyStop();
      return true;
    }
  }
  return false;
}

void emergencyStop() {
  emergency = true;
  servoDrive.write(SERVO_OPEN_ANGLE); // safe position; change if needed
  digitalWrite(PIN_BUZZER, LOW);
}
